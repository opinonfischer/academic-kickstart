library(tensorflow)
library(keras)
use_condaenv("r-tensorflow")
#install_tensorflow(method = c("auto", "virtualenv", "conda", "system"),
#                   conda = "auto", version = "nightly", envname = "r-tensorflow",
#                  extra_packages = NULL, restart_session = TRUE)

#reticulate::py_config()
#tensorflow::tf_config()


#sess = tf$Session()

#dataset_imdb(path = "imdb.npz", num_words = NULL, skip_top = 0L,
 #            maxlen = NULL, seed = 113L, start_char = 1L, oov_char = 2L,
 #            index_from = 3L)

imdb <- dataset_imdb(num_words = 10000)  #Keep the top 10000 most frequent words
c(c(train_data, train_labels), c(test_data, test_labels)) %<-%  imdb
str(train_data)

#Decode the reviews back into English
word_index <- dataset_imdb_word_index()   #word_index = named list mapping words to an integer index  
reverse_word_index <- names(word_index)   # reverses it, mapping integer indices to words
names(reverse_word_index) <- word_index
#Decode the review. Note that the indices are offset by 3 because 0, 1 and 2 are reserved indices for "padding", "start of sequence" and "unknown"
decoded_review <- sapply(train_data[[1]], function(index){
  word <- if(index >=3) reverse_word_index[[as.character(index-3)]]
  if (!is.null(word)) word else "?"
})
 
#Prepare the data - Data encoding
vectorize_sequences <- function(sequences, dimension = 10000){
  # Creates an all-zeo matrix of shape (length(sequences), dimension)
  results <- matrix(0, nrow = length(sequences), ncol = dimension)
  for (i in 1:length(sequences))
    #Set specific indices of results[i] to 1s
    results[i, sequences[[i]]] <- 1
  results
}

x_train <- vectorize_sequences(train_data)
str(x_train[1,])
x_test <- vectorize_sequences(test_data)
str(x_test[1,])

#Convert labels from integer to numeric
y_train <- as.numeric(train_labels)
y_test <- as.numeric(test_labels)

#Model definition
model <- keras_model_sequential() %>%
  layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
  layer_dense(units = 16, activation = "relu") %>%
  layer_dense(units = 1, activation = "sigmoid")

#Comppiling the model
model %>% compile(
  optimizer = "rmsprop",
  loss = "binary_crossentropy",
  metrics = c("accuracy")
  )

#Setting aside a validation set
val_indices <- 1:10000
x_val <- x_train[val_indices,]
partial_x_train <- x_train[-val_indices,]
y_val <- y_train[val_indices]
partial_y_train <- y_train[-val_indices]

#Trainig your model
history <- model %>% fit(
  partial_x_train,
  partial_y_train,
  epoch = 20,
  batch_size = 512,
  validation_data = list(x_val, y_val)
)

history_df <- as.data.frame(history)
str(history_df)
#history$metrics
#history$params

#retraining a model from scratch
model <- keras_model_sequential() %>%
  layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
  layer_dense(units = 16, activation = "relu") %>%
  layer_dense(units = 1, activation = "sigmoid")

model %>% compile(
  optimizer = "rmsprop",
  loss = "binary_crossentropy",
  metrics = c("accuracy")
)

model %>% fit(
  x_train,
  y_train,
  epoch = 4,
  batch_size = 512
)

results <- model %>% evaluate(x_test, y_test)

#Use a trained network to generate predictions on new data
model %>% predict(x_test[1:10,])
