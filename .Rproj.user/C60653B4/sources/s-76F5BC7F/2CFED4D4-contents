

# -----------------------------------------------------------
# NOT RUN {
# default installation
library(keras)
use_condaenv("r-tensorflow") 
install_keras()

# install using a conda environment (default is virtualenv)
install_keras(method = "conda")

# install with GPU version of TensorFlow
# (NOTE: only do this if you have an NVIDIA GPU + CUDA!)
install_keras(tensorflow = "gpu")
#-----------------------------------------------------------


library(keras)
use_condaenv("r-tensorflow")

mnist <- dataset_mnist()
train_images <- mnist$train$x
train_labels <- mnist$train$y
test_images <- mnist$test$x
test_labels <- mnist$test$y

#Nb of axes of the tensor train_images
length(dim(train_images))
#3

#Shape of the tensor train_images
dim(train_images)
#60000   28   28

#Type of the tensor train_images
typeof(train_images)
# integer

# Plot the ninth sample of the dataset
digit <- train_images[9,,]
plot(as.raster(digit, max = 255))
train_labels[9]

str(train_images)
str(train_labels)
str(test_images)
str(test_labels)

network <- keras_model_sequential() %>%
  layer_dense(units = 512, activation = "relu", input_shape = c(28*28)) %>%
  layer_dense(units = 10, activation = "softmax")

network  %>% compile(
  optimizer = "rmsprop",
  loss = "categorical_crossentropy",
  metrics = c("accuracy")
  )

train_images <- array_reshape(train_images, c(60000, 28*28))
train_images <- train_images / 255
test_images <- array_reshape(test_images, c(10000, 28*28))
test_images <- test_images / 255

train_labels <- to_categorical(train_labels)
test_labels <- to_categorical(test_labels)

network %>% fit(train_images, train_labels, epochs = 5, batch_size = 128)
metrics <- network %>% evaluate(test_images, test_labels)
metrics

